{{- range $app := .Values.applications }}
---
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: {{ $.Values.project }}-{{ $app.name }}-build-workflow-template
  namespace: {{ $.Values.project }}
spec:
  serviceAccountName: {{ $.Values.project }}-ci-workflow-sa
  entrypoint: ci-pipeline
  arguments:
    parameters:
      - name: github-event-type
        value: ""
      - name: github-sha
        value: ""
  volumes:
    - name: docker-config
      secret:
        secretName: registry-secret
        items:
          - key: .dockerconfigjson
            path: config.json
  templates:
    - name: ci-pipeline
      dag:
        tasks:
          - name: get-latest-sha
            template: fetch-latest-commit-sha
            when: "{{`{{workflow.parameters.github-event-type}}`}} != 'push'"

          - name: commit-status-start
            template: commit-status
            depends: "(get-latest-sha.Succeeded || get-latest-sha.Skipped)"
            arguments:
              parameters:
                - name: state
                  value: "pending"
                - name: description
                  value: "{{ $app.name }} 애플리케이션 빌드를 시작합니다"
                - name: context
                  value: "ci/{{ $.Values.project }}-{{ $app.name }}"
                - name: sha
                  value: "{{`{{= workflow.parameters['github-event-type'] == 'push' ? workflow.parameters['github-sha'] : tasks['get-latest-sha'].outputs.parameters['commit-sha'] }}`}}"

          - name: build-container
            template: build-container
            depends: "(get-latest-sha.Succeeded || get-latest-sha.Skipped)"
            arguments:
              parameters:
                - name: sha
                  value: "{{`{{= workflow.parameters['github-event-type'] == 'push' ? workflow.parameters['github-sha'] : tasks['get-latest-sha'].outputs.parameters['commit-sha'] }}`}}"

          - name: commit-status-build-success
            template: commit-status
            depends: "build-container.Succeeded"
            arguments:
              parameters:
                - name: state
                  value: "pending"
                - name: description
                  value: "{{ $app.name }} 빌드 완료 - 배포 준비 중"
                - name: context
                  value: "ci/{{ $.Values.project }}-{{ $app.name }}"
                - name: sha
                  value: "{{`{{= workflow.parameters['github-event-type'] == 'push' ? workflow.parameters['github-sha'] : tasks['get-latest-sha'].outputs.parameters['commit-sha'] }}`}}"

          - name: commit-status-build-failed
            template: commit-status
            depends: "build-container.Failed"
            arguments:
              parameters:
                - name: state
                  value: "failure"
                - name: description
                  value: "{{ $app.name }} 빌드 과정에서 오류가 발생했습니다"
                - name: context
                  value: "ci/{{ $.Values.project }}-{{ $app.name }}"
                - name: sha
                  value: "{{`{{= workflow.parameters['github-event-type'] == 'push' ? workflow.parameters['github-sha'] : tasks['get-latest-sha'].outputs.parameters['commit-sha'] }}`}}"

          - name: update-config
            template: update-config
            depends: "build-container.Succeeded"
            arguments:
              parameters:
                - name: sha
                  value: "{{`{{= workflow.parameters['github-event-type'] == 'push' ? workflow.parameters['github-sha'] : tasks['get-latest-sha'].outputs.parameters['commit-sha'] }}`}}"

          - name: commit-status-success
            template: commit-status
            depends: "update-config.Succeeded"
            arguments:
              parameters:
                - name: state
                  value: "success"
                - name: description
                  value: "{{ $app.name }} 빌드 및 배포 트리거 성공"
                - name: context
                  value: "ci/{{ $.Values.project }}-{{ $app.name }}"
                - name: sha
                  value: "{{`{{= workflow.parameters['github-event-type'] == 'push' ? workflow.parameters['github-sha'] : tasks['get-latest-sha'].outputs.parameters['commit-sha'] }}`}}"

          - name: commit-status-failed
            template: commit-status
            depends: "update-config.Failed"
            arguments:
              parameters:
                - name: state
                  value: "failure"
                - name: description
                  value: "{{ $app.name }} 배포 트리거 과정에서 오류가 발생했습니다"
                - name: context
                  value: "ci/{{ $.Values.project }}-{{ $app.name }}"
                - name: sha
                  value: "{{`{{= workflow.parameters['github-event-type'] == 'push' ? workflow.parameters['github-sha'] : tasks['get-latest-sha'].outputs.parameters['commit-sha'] }}`}}"

    - name: fetch-latest-commit-sha
      container:
        image: alpine:3.18
        command: ["/bin/sh", "-c"]
        args:
          - |
            set -e
            apk add --no-cache curl jq
    
            COMMIT_SHA=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/{{ $app.git.owner }}/{{ $app.git.repo }}/branches/{{ $app.git.branch }}" \
              | jq -r '.commit.sha')
            echo "$COMMIT_SHA" > /tmp/commit_sha.txt
        env:
          - name: GITHUB_TOKEN
            valueFrom:
              secretKeyRef:
                name: {{ $.Values.project }}-github-access-secret
                key: token
      outputs:
        parameters:
          - name: commit-sha
            valueFrom:
              path: /tmp/commit_sha.txt
    
    - name: commit-status
      inputs:
        parameters:
          - name: state
          - name: description
          - name: context
          - name: sha
      container:
        image: curlimages/curl:latest
        command: ["/bin/sh", "-c"]
        args:
          - |
            curl -s -X POST \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              -H "Content-Type: application/json" \
              -d '{
                "state": "{{`{{inputs.parameters.state}}`}}",
                "description": "{{`{{inputs.parameters.description}}`}}",
                "context": "{{`{{inputs.parameters.context}}`}}"
              }' \
              "https://api.github.com/repos/{{ $app.git.owner }}/{{ $app.git.repo }}/statuses/{{`{{inputs.parameters.sha}}`}}"
        env:
          - name: GITHUB_TOKEN
            valueFrom:
              secretKeyRef:
                name: {{ $.Values.project }}-github-access-secret
                key: token
    
    - name: build-container
      inputs:
        parameters:
          - name: sha
      hostAliases:
        - ip: "192.168.0.200"
          hostnames:
            - "harbor.injunweb.com"
      container:
        image: gcr.io/kaniko-project/executor:latest
        args:
          - "--context=git://github.com/{{ $app.git.owner }}/{{ $app.git.repo }}.git#refs/heads/{{ $app.git.branch }}#{{`{{inputs.parameters.sha}}`}}"
          - "--dockerfile=Dockerfile"
          - "--destination=harbor.injunweb.com/injunweb/{{ $.Values.project }}-{{ $app.name }}:{{`{{inputs.parameters.sha}}`}}"
          - "--destination=harbor.injunweb.com/injunweb/{{ $.Values.project }}-{{ $app.name }}:latest"
          - "--registry-mirror=harbor.injunweb.com/proxy"
          - "--cache=true"
          - "--cache-repo=harbor.injunweb.com/injunweb/cache"
          - "--snapshot-mode=redo"
          - "--use-new-run=true"
        env:
          - name: GIT_USERNAME
            valueFrom:
              secretKeyRef:
                name: {{ $.Values.project }}-github-access-secret
                key: username
          - name: GIT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ $.Values.project }}-github-access-secret
                key: token
        volumeMounts:
          - name: docker-config
            mountPath: /kaniko/.docker/
    
    - name: update-config
      inputs:
        parameters:
          - name: sha
      container:
        image: curlimages/curl:latest
        command: ["/bin/sh", "-c"]
        args:
          - |
            curl -X POST https://api.github.com/repos/injunweb/projects-gitops/dispatches \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -d '{
                "event_type": "config-api",
                "client_payload": {
                  "path": "projects/{{$.Values.project}}/applications/{{$app.name}}",
                  "action": "apply",
                  "spec": {
                    "git": {
                      "hash": "'"{{`{{inputs.parameters.sha}}`}}"'"
                    }
                  }
                }
              }'
        env:
          - name: GITHUB_TOKEN
            valueFrom:
              secretKeyRef:
                name: {{ $.Values.project }}-github-access-secret
                key: token
{{- end }}